<?php
/**
 * @file
 *   Workflow module
 */

define('WF_CODE_INDENT_SPACES', 2);

/**
 * Implements hook_menu().
 */
function wf_menu() {
  $items['admin/config/development/wf'] = array(
    'title' => 'WF Base',
    'description' => t('Configure base settings for WF.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wf_settings_form'),
    'access arguments' => array('administer'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'wf.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function wf_theme() {
  return array(
    'php_array' => array(
      'function' => 'wf_theme_php_array',
      'variables' => array(
        'array' => array(),
        'indent' => 0,
      ),
    ),
  );
}

/**
 * Theme hook implementation for php_array.
 */
function wf_theme_php_array($variables) {
  $array = $variables['array'];
  $indent = $variables['indent'];
  $indent_prefix = str_repeat(' ', $indent * WF_CODE_INDENT_SPACES);
  $php = $indent_prefix . "array(\n";
  foreach ($array as $key => $value) {
    if (is_array($value)) {
      $output_value = theme('php_array', array('array' => $value, 'indent' => $indent + 1));
    }
    elseif (is_string($value)) {
      $output_value = "'" . addslashes($value) . "'";
    }
    elseif (is_scalar($value)) {
      $output_value = $value;
    }
    else {
      // No serialization for non-arrays / non-scalars.
      continue;
    }

    if (is_string($key)) {
      $output_key = "'" . addslashes($key) . "'";
    }
    else {
      $output_key = $key;
    }

    $php .= "$indent_prefix  $output_key => $output_value,\n";
  }
  $php .= "$indent_prefix)";

  return $php;
}

/**
 * Implements hook_shell_client_command_alter().
 */
function wf_shell_client_command_alter(&$variables) {
  if ('ssh' == $variables['command']) {
    $variables['options']['-q'] = NULL;
    $variables['options']['-l'] = 'deployer';
  }
  if ('scp' == $variables['command']) {
    $variables['options']['-o'] = 'User=deployer';
  }
}

/**
 * Retrive the structure for hook_field_extra_fields().
 */
function wf_generate_extra_fields($entity_type) {
  $entity = entity_get_property_info($entity_type);

  $extra_fields = array();
  $weight = -50;

  foreach ($entity['properties'] as $field_name => $field_properties) {
    foreach ($field_properties['wf_extra_fields'] as $value) {
      if (!isset($extra_fields[$value])) {
        $extra_fields[$value] = array();
      }
      $extra_fields[$value][$field_name] = array(
        'label' => $field_properties['label'],
        'description' => $field_properties['description'],
        'weight' => $weight,
      );
    }
    ++$weight;
  }

  $entities = array();
  $entity_info = entity_get_info($entity_type);
  foreach (array_keys($entity_info['bundles']) as $bundle) {
    $entities[$bundle] = $extra_fields;
  }

  return array($entity_type => $entities);
}
